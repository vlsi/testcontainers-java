import groovy.json.JsonOutput

// Emit a JSON-formatted list of check tasks to be run in CI
task testMatrix {
    project.afterEvaluate {
        def checkTasks = subprojects.collect {
            it.tasks.findByName("check")
        }.findAll { it != null }

        dependsOn(checkTasks)
        doLast {
            // Obtain a list of check tasks that are not up-to-date, i.e.
            //  the ones which Gradle cannot find a cached output for.
            def checkTaskPaths = checkTasks
                .findAll { !it.state.upToDate }
                .collect { it.path }

            println("::set-output name=matrix::{\"gradle_args\":${JsonOutput.toJson(checkTaskPaths)}}")
        }
    }
}

// If we're executing the `taskMatrix` task, disable tests and other slow tasks
//  so that we can get a result quickly.
gradle.taskGraph.whenReady {
    if (it.hasTask(tasks.testMatrix)) {
        for (subproject in subprojects) {
            subproject.tasks.withType(Test).all {
                outputs.cacheIf("test execution was skipped, so caching is disabled") { false }
                testExecuter([execute: { spec, processor -> }, stopNow:{}] as org.gradle.api.internal.tasks.testing.TestExecuter)
            }
            subproject.tasks.findByName("shadowJar")?.enabled = false
            subproject.tasks.findByName("javadoc")?.enabled = false
            subproject.tasks.findByName("delombok")?.enabled = false
            subproject.tasks.findByName("japicmp")?.enabled = false
        }
    }
}
